% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gwl_single_sites.R
\name{gwl_plot_field}
\alias{gwl_plot_field}
\alias{gwl_plot_all}
\title{Single site groundwater level plots and tables}
\usage{
gwl_plot_field(
  gwl_data,
  plot_title = "",
  date_col = "lev_dt",
  value_col = "sl_lev_va",
  parameter_cd_gwl = NA,
  approved_col = "lev_age_cd",
  flip_y = TRUE
)

gwl_plot_all(
  gw_level_dv,
  gwl_data,
  date_col,
  value_col,
  approved_col,
  parameter_cd_gwl = NA,
  y_label = "GWL",
  plot_title = "",
  add_trend = FALSE,
  flip_y = FALSE
)
}
\arguments{
\item{gwl_data}{data frame returned from dataRetrieval::readNWISgwl}

\item{plot_title}{character}

\item{date_col}{name of date column. Default is "lev_dt".}

\item{value_col}{name of value column. Default is "sl_lev_va".}

\item{parameter_cd_gwl}{Parameter code(s) to be filtered to in a column specifically
named "parameter_cd". If the
data doesn't come directly from NWIS services, this can be set to \code{NA},
and this argument will be ignored.}

\item{approved_col}{name of column to get provisional/approved status.
Default is "lev_age_cd".}

\item{flip_y}{logical. If \code{TRUE}, flips the y axis so that the smallest number is on top.
Default is \code{TRUE}.}

\item{gw_level_dv}{daily value groundwater levels. Must include columns specified in date_col, value_col, and approved_col.}

\item{y_label}{character for y-axis label. Consider using \code{\link[dataRetrieval]{readNWISpCode}} for USGS parameter_nm.}

\item{add_trend}{logical. Uses \code{kendell_test_5_20_years}.}
}
\description{
Function to create the field groundwater level data plot.
}
\examples{

# site <- "263819081585801"
# gwl_data <- dataRetrieval::readNWISgwl(site)

# Using package example data:
gwl_data <- L2701_example_data$Discrete
plot_title <- attr(gwl_data, "siteInfo")[["station_nm"]]
pcodes <- dataRetrieval::readNWISpCode(unique(gwl_data$parameter_cd))
gwl_plot_field(gwl_data, paste(plot_title,
                         pcodes$parameter_nm[pcodes$parameter_cd == "62610"]), 
               parameter_cd_gwl = "62610",
               flip_y = FALSE)
gwl_plot_field(gwl_data,  paste(plot_title,
                         pcodes$parameter_nm[pcodes$parameter_cd == "62611"]), 
               parameter_cd_gwl = "62611",
               flip_y = FALSE)
gwl_plot_field(gwl_data,  paste(plot_title,
                         pcodes$parameter_nm[pcodes$parameter_cd == "72019"]), 
               parameter_cd_gwl = "72019",
               value_col = "lev_va")
# site <- "263819081585801"
parameterCd <- "62610"
# statCd <- "00001"
# gw_level_dv <- dataRetrieval::readNWISdv(site, parameterCd, statCd = statCd)
# Using package example data:
gw_level_dv <- L2701_example_data$Daily
gwl_data <- L2701_example_data$Discrete
plot_title <- attr(gwl_data, "siteInfo")[["station_nm"]]
pcodes <- dataRetrieval::readNWISpCode(unique(gwl_data$parameter_cd))
date_col = "Date"
value_col = "X_62610_00001"
approved_col = "X_62610_00001_cd"

gwl_plot_all(gw_level_dv, 
             NULL, 
             date_col = date_col, 
             value_col = value_col,
             approved_col = approved_col,
             plot_title = plot_title,
             flip_y = FALSE) 

date_col = c("Date", "lev_dt")
value_col = c("X_62610_00001", "sl_lev_va")
approved_col = c("X_62610_00001_cd", "lev_age_cd") 

gwl_plot_all(gw_level_dv, 
             gwl_data, 
             parameter_cd_gwl = "62610",
             date_col = date_col, 
             value_col = value_col,
             approved_col = approved_col,
             plot_title = paste(plot_title,
                         pcodes$parameter_nm[pcodes$parameter_cd == "62610"]),
             add_trend = TRUE)
             
gwl_plot_all(NULL, 
             gwl_data, 
             parameter_cd_gwl = "62610",
             date_col = "lev_dt", 
             value_col = "sl_lev_va",
             approved_col = "lev_age_cd",
             plot_title = paste(plot_title,
                         pcodes$parameter_nm[pcodes$parameter_cd == "62610"]))

}
